using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;

namespace CQRSToolkit.DependencyInjection.Generator
{
    internal static class SourceTemplate
    {
        static readonly string _template = "// <auto-generated/>\n" +
                                 "using System.CodeDom.Compiler;\n\n" +
                                 "namespace {0}\n" +
                                 "{{\n" +
                                 $"\t[GeneratedCode(\"{Assembly.GetExecutingAssembly().GetName().Name}\", \"{Assembly.GetExecutingAssembly().GetName().Version}\")]\n" +
                                 "\t{1} static partial class {2}\n" +
                                 "\t{{\n" +
                                 "\t\t{3} static partial Microsoft.Extensions.DependencyInjection.IServiceCollection {4}(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, {5})\n" +
                                 "\t\t{{\n" +
                                 "{6}\n" +
                                 "\t\t\treturn services;\n" +
                                 "\t\t}}\n" +
                                 "\t}}\n" +
                                 "}}";

        static readonly string _templateClosed = "// <auto-generated/>\n" +
                                 "using System.CodeDom.Compiler;\n\n" +
                                 "namespace {0}\n" +
                                 "{{\n" +
                                 $"\t[GeneratedCode(\"{Assembly.GetExecutingAssembly().GetName().Name}\", \"{Assembly.GetExecutingAssembly().GetName().Version}\")]\n" +
                                 "\t{1} static class {2}\n" +
                                 "\t{{\n" +
                                 "\t\t{3} static Microsoft.Extensions.DependencyInjection.IServiceCollection {4}(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, {5})\n" +
                                 "\t\t{{\n" +
                                 "{6}\n" +
                                 "\t\t\treturn services;\n" +
                                 "\t\t}}\n" +
                                 "\t}}\n" +
                                 "}}";

        internal static string GenerateSource(string outNamespace, string classAccessModifier, string className,
            string methodAccessModifier, string methodName, string lifetimeParam, string injections, bool isPartial = true)
        {
            return string.Format(isPartial ? _template : _templateClosed, outNamespace ,classAccessModifier, className, methodAccessModifier, methodName, lifetimeParam, injections);
        }
    }
}