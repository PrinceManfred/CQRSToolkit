using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace CQRSToolkit.DependencyInjection.Generator
{
    [Generator]
    public class ServiceInjectionGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            // Find the main method
            var mainMethod = context.Compilation.GetEntryPoint(context.CancellationToken);

            // Build up the source code
            string source = $@"// <auto-generated/>
using System;

namespace {mainMethod.ContainingNamespace.ToDisplayString()}
{{
    public static partial class {mainMethod.ContainingType.Name}
    {{
        static partial void HelloFrom(string name) =>
            Console.WriteLine($""Generator says: Hi from '{{name}}'"");
    }}
}}
";
            var typeName = mainMethod.ContainingType.Name;

            // Add the source code to the compilation
            context.AddSource($"{typeName}.g.cs", source);
        }

        public void Initialize(GeneratorInitializationContext context)
        {
        }
        //        public void Initialize(IncrementalGeneratorInitializationContext context)
        //        {
        //#if DEBUG
        //            if (!Debugger.IsAttached)
        //            {
        //                Debugger.Launch();
        //            }
        //#endif 
        //            Console.WriteLine("salad");
        //            IncrementalValuesProvider<ClassDeclarationSyntax> classDeclarations = context.SyntaxProvider
        //            .CreateSyntaxProvider(IsCQRSClass,Trans);
        //        }

        //        private static bool IsCQRSClass(SyntaxNode node, CancellationToken cancel)
        //        {
        //            if(node is ClassDeclarationSyntax c)
        //            {
        //                IEnumerable<BaseTypeSyntax> baseTypes = c.BaseList.Types.Where(baseType => baseType.ToString().Contains("IQueryHandler")).Select(baseType => baseType);
        //                foreach (var item in baseTypes) {
        //                    Console.WriteLine(baseTypes);
        //                }

        //            }
        //            return false;
        //        }

        //        private static ClassDeclarationSyntax Trans(GeneratorSyntaxContext ctx, CancellationToken cancel)
        //        {
        //            return (ClassDeclarationSyntax) ctx.Node;
        //        }
    }
}

